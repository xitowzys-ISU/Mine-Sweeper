'use strict';

import {
    findTIME
} from "./stopwatch";

export class Core {

    constructor(settingsGame) {
        // –®–∏—Ä–∏–Ω–∞ –¥–æ—Å–∫–∏
        this.widthBoard = settingsGame.widthBoard;
        // –í—ã—Å–æ—Ç–∞ –¥–æ—Å–∫–∏
        this.heightBoard = settingsGame.heightBoard;
        // –ë–ª–æ–∫–∏
        this.squares = [];
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–º–±
        this.bombAmount = settingsGame.bombAmount;
        // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
        this.isGameStart = false;
        // –ò–≥—Ä–∞ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–∞
        this.isGameOver = false;
        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–∂–∫–æ–≤
        this.flags = 0;
        // –í—Ä–µ–º—è –Ω–∞–∏–≥—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        this.gameTime = "";
        // –î–æ—Å–∫–∞
        this.board = document.querySelector('.grid');
        // –í—Å–µ —è—á–µ–π–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ
        this.board–°ells = document.querySelectorAll('.grid > div');
        // –°–µ–∫—É–Ω–¥–æ–º–µ—Ä
        this.stopwatch = document.querySelector('.stopwatch');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª—è
    createBoard() {

        this.stopwatch.innerHTML = "00:00";

        this.board.style.width = (50 * this.widthBoard) + "px";
        this.board.style.height = (50 * this.heightBoard) + "px";

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
        for (let i = 0; i < this.heightBoard; i++) {

            this.squares.push(Array());

            for (let j = 0; j < this.widthBoard; j++) {
                const square = document.createElement('div');

                square.setAttribute('data-x', j);
                square.setAttribute('data-y', i);
                square.classList.add("valid");
                square.setAttribute('tabindex', 0);
                this.board.appendChild(square);

                this.squares[i].push(Array());
                this.squares[i][j].push(square);
                this.squares[i][j].push("valid");
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
    click(square) {

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–∂–∞—Ç–æ–π —è—á–µ–π–∫–∏
        let board–°ellX = parseInt(square.getAttribute('data-x'));
        let board–°ellY = parseInt(square.getAttribute('data-y'));

        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏
        if (!this.isGameStart) {

            // –†–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±–æ–º–±
            for (let i = 0; i < this.bombAmount;) {

                let squareX = Math.floor(Math.random() * (this.widthBoard));
                let squareY = Math.floor(Math.random() * (this.heightBoard));

                if (this.squares[squareY][squareX][1] == 'bomb' || (squareX == board–°ellX && squareY == board–°ellY)) {
                    continue;
                } else {
                    this.squares[squareY][squareX][1] = 'bomb';
                    i++;
                }

            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–æ–º —Å—Ç–æ—è—â–∏—Ö –±–æ–º–±
            for (let i = 0; i < this.heightBoard; i++) {
                for (let j = 0; j < this.widthBoard; j++) {
                    // –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–æ–º–±—ã
                    let total = 0;

                    let limitationBoard = this.limitationBoard(j, i);

                    if (this.squares[i][j][1] == 'valid' || this.squares[i][j][1] == 'checked') {

                        if (limitationBoard.upperLeft && this.squares[i - 1][j - 1][1] == 'bomb') total++;
                        if (limitationBoard.upperRight && this.squares[i - 1][j + 1][1] == 'bomb') total++;
                        if (limitationBoard.up && this.squares[i - 1][j][1] == 'bomb') total++;
                        if (limitationBoard.down && this.squares[i + 1][j][1] == 'bomb') total++;
                        if (limitationBoard.left && this.squares[i][j - 1][1] == 'bomb') total++;
                        if (limitationBoard.right && this.squares[i][j + 1][1] == 'bomb') total++;
                        if (limitationBoard.lowerLeft && this.squares[i + 1][j - 1][1] == 'bomb') total++;
                        if (limitationBoard.lowerRight && this.squares[i + 1][j + 1][1] == 'bomb') total++;

                        this.squares[i][j].push(total);
                    }

                }
            }

            let total = this.squares[board–°ellY][board–°ellX][2];

            // –¶–≤–µ—Ç —Ü–∏—Ñ—Ä—ã
            if (total != 0) {
                if (total == 1) square.classList.add('one');
                if (total == 2) square.classList.add('two');
                if (total == 3) square.classList.add('three');
                if (total == 4) square.classList.add('four');

                square.innerHTML = total;
            } else {
                this.checkSquare(square, board–°ellX, board–°ellY);
            }

            findTIME();
            this.isGameStart = true;
        }

        if (this.isGameOver) return;

        if (square.classList.contains('checked') || square.classList.contains('flag')) return;

        if (this.squares[board–°ellY][board–°ellX][1] == 'bomb') {
            this.gameOver(square);
        } else {
            let total = this.squares[board–°ellY][board–°ellX][2];

            if (total != 0) {
                square.classList.add('checked');

                // –¶–≤–µ—Ç —Ü–∏—Ñ—Ä
                if (total == 1) square.classList.add('one');
                if (total == 2) square.classList.add('two');
                if (total == 3) square.classList.add('three');
                if (total == 4) square.classList.add('four');

                square.innerHTML = total;
                return;
            }

            this.checkSquare(square, board–°ellX, board–°ellY);
        }

        square.classList.add('checked');
        this.squares[board–°ellY][board–°ellX][1] = "checked";
    }

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å–∫–∏. –í –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è.
    limitationBoard(x, y) {

        let limitationBoard = {
            upperLeft: false,
            upperRight: false,
            up: false,
            down: false,
            left: false,
            right: false,
            lowerLeft: false,
            lowerRight: false
        };

        // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
        const isLeftEdge = (x % this.widthBoard === 0);

        // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
        const isRightEdge = (x % this.widthBoard === this.widthBoard - 1);

        // –í–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        if (y >= 1 && !isLeftEdge) limitationBoard.upperLeft = true;

        // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
        if (y > 0 && !isRightEdge) limitationBoard.upperRight = true;

        // –í–≤–µ—Ä—Ö
        if (y > 0) limitationBoard.up = true;

        // –í–Ω–∏–∑
        if (y < this.heightBoard - 1) limitationBoard.down = true;

        // –í–ª–µ–≤–æ
        if (!isLeftEdge) limitationBoard.left = true;

        // –í–ø—Ä–∞–≤–æ
        if (!isRightEdge) limitationBoard.right = true;

        // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        if (y < this.heightBoard - 1 && !isLeftEdge) limitationBoard.lowerLeft = true;

        // –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        if (y < this.heightBoard - 1 && !isRightEdge) limitationBoard.lowerRight = true;

        return limitationBoard;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤, –µ—Å–ª–∏ –±—ã–ª –Ω–∞–∂–∞—Ç –ø—É—Å—Ç–æ–π –∫–≤–∞–¥—Ä–∞—Ç
    checkSquare(square, x, y) {
        let limitationBoard = this.limitationBoard(x, y);

        setTimeout(() => {
            if (limitationBoard.upperLeft) this.click(this.squares[y - 1][x - 1][0]);
            if (limitationBoard.upperRight) this.click(this.squares[y - 1][x + 1][0]);
            if (limitationBoard.up) this.click(this.squares[y - 1][x][0]);
            if (limitationBoard.down) this.click(this.squares[y + 1][x][0]);
            if (limitationBoard.left) this.click(this.squares[y][x - 1][0]);
            if (limitationBoard.right) this.click(this.squares[y][x + 1][0]);
            if (limitationBoard.lowerLeft) this.click(this.squares[y + 1][x - 1][0]);
            if (limitationBoard.lowerRight) this.click(this.squares[y + 1][x + 1][0]);

        }, 10);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞
    addFlag(square) {
        if (!this.isGameStart) return;

        // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–∂–∞—Ç–æ–π —è—á–µ–π–∫–∏
        let board–°ellX = parseInt(square.getAttribute('data-x'));
        let board–°ellY = parseInt(square.getAttribute('data-y'));

        if (this.isGameOver) return;

        if (!(this.squares[board–°ellY][board–°ellX][1] == 'checked') && (this.flags < this.bombAmount)) {
            if (!(this.squares[board–°ellY][board–°ellX][0].classList.contains("flag"))) {
                square.classList.add('flag');
                square.innerHTML = ' üö©';
                this.flags++;
                this.checkForWin();
            } else {
                square.classList.remove('flag');
                square.innerHTML = '';
                this.flags--;
            }
        } else if (this.squares[board–°ellY][board–°ellX][0].classList.contains("flag") && (this.flags == this.bombAmount)) {
            square.classList.remove('flag');
            square.innerHTML = '';
            this.flags--;
        }

    }

    // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
    gameOver(square) {
        this.gameTime = this.stopwatch.innerHTML;
        findTIME();
        this.isGameOver = true;

        //–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–æ–º–±—ã
        for (let i = 0; i < this.heightBoard; i++) {
            for (let j = 0; j < this.widthBoard; j++) {
                if (this.squares[i][j][1] == 'bomb') {
                    this.squares[i][j][0].innerHTML = '<img src="images/bomb.svg">';
                    this.squares[i][j][0].classList.add('checked');
                }
            }
        }
        this.resultGame("fail");
        console.debug("GAME OVER");
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–∞
    checkForWin() {
        let matches = 0;

        for (let i = 0; i < this.heightBoard; i++) {
            for (let j = 0; j < this.widthBoard; j++) {
                if (this.squares[i][j][0].classList.contains("flag") && this.squares[i][j][1] == 'bomb') {
                    matches++;
                }
            }
        }

        if (matches === this.bombAmount) {
            this.isGameOver = true;
            this.gameTime = this.stopwatch.innerHTML;
            findTIME();
            this.resultGame("win");
        }
    }

    resultGame(result) {
        const resultGameP = document.querySelectorAll('.resultGame > p');

        document.querySelector('.resultGameContainer').style.display = 'flex';

        console.log(resultGameP);
        if(result == "win") {
            resultGameP[0].innerHTML = "–¢—ã –≤—ã–∏–≥—Ä–∞–ª";
            resultGameP[0].style.color = "#bdffd3";
            resultGameP[1].innerHTML = this.gameTime;
        } else {
            resultGameP[0].innerHTML = "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª";
            resultGameP[0].style.color = "#ff3300";
            resultGameP[1].innerHTML = this.gameTime;
        }

    }
}